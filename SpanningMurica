package lab3;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.Scanner;

public class SpanningMurica {
	static int p;
	Integer[][] roads;
	
	Hashtable<Integer, String> names;
	Hashtable< String, Integer> names2;
	public SpanningMurica(){
		names = new Hashtable<Integer, String>();
		names2 = new Hashtable<String, Integer>();
	}
	public static void main(String[] args) throws FileNotFoundException{
		SpanningMurica n = new SpanningMurica();
		
		if(args.length != 0){
			n.init(args[0] + ".txt");			
		}else{
			n.init("usa.txt");
		}
		Hashtable<Integer, Integer>[] list = n.algorithm();
		System.out.println(list[0].isEmpty());
		
		int km = 0;
		for(int i = 0; i < list.length; i++){
			for(Integer tmp : list[i].keySet()){
				System.out.println(n.names.get(i) + "--" + n.names.get(tmp) + "[" + list[i].get(tmp) + "]");
				km += list[i].get(tmp);
			}		
		}
		System.out.println(p + "");
		System.out.println("Distance: " + km + "km");
	}
	Hashtable<Integer, Integer>[] algorithm(){
		@SuppressWarnings("unchecked")
		Hashtable<Integer, Integer>[] tree = new Hashtable[p];
		Integer[] c = new Integer[p];
		Integer[] e = new Integer[p];
		ArrayList<Integer> queue = new ArrayList<Integer>();
		for(int i = 0; i < p; i++){
			c[i] = Integer.MAX_VALUE;
			e[i] = -1;
			queue.add(new Integer(i));
		}
		while(!queue.isEmpty()){
			Integer val = null;
			for(Integer t:queue){
				if(val == null){
					val = t;
				}else if( c[val] > c[t]){
					val = t;
				}
			}
			queue.remove(val);
			tree[val] = new Hashtable<Integer, Integer>();
			if(e[val] != -1){
				tree[val].put(e[val], c[val]);
			}
			for(int i = 0; i < p; i++){
				if( roads[i][val] < c[i] && queue.contains(new Integer(i))){
					c[i] = roads[i][val];
					e[i] = val;
				}
				if( roads[val][i] < c[i] && queue.contains(new Integer(i))){
					c[i] = roads[val][i];
					e[i] = val;
				}
			}
		}	
		return tree;
		
		
/*	    Associate with each vertex v of the graph a number C[v] (the cheapest cost of a connection to v) and an edge E[v] (the edge providing that cheapest connection). To initialize these values, set all values of C[v] to +âˆž (or to any number larger than the maximum edge weight) and set each E[v] to a special flag value indicating that there is no edge connecting v to earlier vertices.
	    Initialize an empty forest F and a set Q of vertices that have not yet been included in F (initially, all vertices).
	    Repeat the following steps until Q is empty:
	        Find and remove a vertex v from Q having the minimum possible value of C[v]
	        Add v to F and, if E[v] is not the special flag value, also add E[v] to F
	        Loop over the edges vw connecting v to other vertices w. For each such edge, if w still belongs to Q and vw has smaller weight than C[w], perform the following steps:
	            Set C[w] to the cost of edge vw
	            Set E[w] to point to edge vw.
	    Return F
*/


	}	
	void init(String str) throws FileNotFoundException {
		boolean init = false;
		Scanner sc = new Scanner(new File(str));
		int t = 0;
		p = 0;
		while(sc.hasNextLine()){
			String s = sc.nextLine();
			if(s.matches("\\D+")){
				names.put(p , s.trim());
				names2.put(s.trim(), p);
				p++;
			}
			else if(s.matches("\\D+\\[\\d+\\]")){
				if(!init){
					roads = new Integer[p][p];
					for(int k = 0; k < p; k++){
						for(int l = 0; l < p; l++){
							roads[k][l] = Integer.MAX_VALUE;
						}
					}
					init = true;
				}
				String[]tmp = s.split("--|\\[|\\]");
				roads[names2.get(tmp[0].trim())][names2.get(tmp[1].trim())] = Integer.parseInt(tmp[2]);
			}
			t++;
		}
		
		sc.close();
	}
}
